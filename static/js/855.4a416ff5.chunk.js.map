{"version":3,"file":"static/js/855.4a416ff5.chunk.js","mappings":"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","sources":["components/skeleton/Skeleton.js","utils/setContent.js","components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <div>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Skeleton;\n","import Skeleton from \"../components/skeleton/Skeleton\";\nimport Spinner from \"../components/spinner/Spinner\";\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, data) => {\n  switch (process) {\n    case \"waiting\":\n      return <Skeleton />;\n    case \"loading\":\n      return <Spinner />;\n    case \"confirmed\":\n      return <Component data={data} />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nexport default setContent;\n","import errorGif from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: \"block\",\n        width: \"250px\",\n        height: \"250px\",\n        objectFit: \"contain\",\n        margin: \"0 auto\",\n      }}\n      src={errorGif}\n      alt=\"error\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import \"./appBanner.scss\";\nimport avengers from \"../../resources/img/avengers.png\";\nimport avengersLogo from \"../../resources/img/avengers-logo.png\";\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers Logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import AppBanner from \"../components/appBanner/AppBanner\";\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useMarvelService from \"../services/MarvelService\";\nimport setContent from \"../utils/setContent\";\n\nconst SinglePage = ({ Component, dataType }) => {\n  const [data, setData] = useState(null);\n  const { id } = useParams();\n\n  const { clearError, getComic, getCharacter, process, setProcess } =\n    useMarvelService();\n\n  useEffect(() => {\n    updateData();\n    // eslint-disable-next-line\n  }, [id]);\n\n  const updateData = () => {\n    clearError();\n\n    switch (dataType) {\n      case \"comic\":\n        getComic(id)\n          .then(onDataLoaded)\n          .then(() => setProcess(\"confirmed\"));\n        break;\n      case \"character\":\n        getCharacter(id)\n          .then(onDataLoaded)\n          .then(() => setProcess(\"confirmed\"));\n        break;\n      default:\n        console.error(dataType);\n    }\n  };\n\n  const onDataLoaded = (data) => {\n    setData(data);\n  };\n\n  return (\n    <>\n      <AppBanner />\n      {setContent(process, Component, data)}\n    </>\n  );\n};\n\nexport default SinglePage;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [process, setProcess] = useState(\"waiting\");\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" }\n    ) => {\n      setProcess(\"loading\");\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        return data;\n      } catch (e) {\n        setProcess(\"error\");\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setProcess(\"loading\");\n  }, []);\n\n  return { request, clearError, process, setProcess };\n};\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { request, clearError, process, setProcess } = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const response = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n    );\n    return response.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const response = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\n    return _transformCharacter(response.data.results[0]);\n  };\n\n  const getCharacterByName = async (name) => {\n    const response = await request(\n      `${_apiBase}characters?name=${name}&${_apiKey}`\n    );\n    return response.data.results.map(_transformCharacter);\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const response = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n    return response.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const response = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(response.data.results[0]);\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : \"There is no description for this character\",\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} pages`\n        : \"No information about the number of pages\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects[0]?.language || \"en-us\",\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"not available\",\n    };\n  };\n\n  return {\n    clearError,\n    process,\n    setProcess,\n    getAllCharacters,\n    getCharacter,\n    getCharacterByName,\n    getAllComics,\n    getComic,\n  };\n};\n\nexport default useMarvelService;\n"],"names":["Skeleton","_jsxs","children","_jsx","className","setContent","process","Component","data","Spinner","ErrorMessage","Error","style","display","width","height","objectFit","margin","src","errorGif","alt","AppBanner","avengers","avengersLogo","_ref","dataType","setData","useState","id","useParams","clearError","getComic","getCharacter","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","console","error","_Fragment","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacterByName","getAllComics"],"sourceRoot":""}