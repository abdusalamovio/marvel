{"version":3,"file":"static/js/71.41a467a7.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import errorGif from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: \"block\",\n        width: \"250px\",\n        height: \"250px\",\n        objectFit: \"contain\",\n        margin: \"0 auto\",\n      }}\n      src={errorGif}\n      alt=\"error\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import \"./appBanner.scss\";\nimport avengers from \"../../resources/img/avengers.png\";\nimport avengersLogo from \"../../resources/img/avengers-logo.png\";\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers Logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import \"./comicsList.scss\";\n\nimport { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport { Link } from \"react-router-dom\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { getAllComics, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset)\n      .then(onComicsListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    setComicsList((comicsList) => [...comicsList, ...newComicsList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 8);\n    setComicsEnded(newComicsList.length < 8);\n  };\n\n  const renderItems = (arr) => {\n    const items = arr.map((item, i) => {\n      return (\n        <li key={i} className=\"comics__item\">\n          <Link to={`/comics/${item.id}`}>\n            <img\n              className=\"comics__item-img\"\n              src={item.thumbnail}\n              alt={item.title}\n            />\n            <div className=\"comics__item-name\">{item.title}</div>\n            <div className=\"comics__item-price\">{item.price}</div>\n          </Link>\n        </li>\n      );\n    });\n    return <ul className=\"comics__grid\">{items}</ul>;\n  };\n\n  return (\n    <div className=\"comics__list\">\n      {setContent(process, () => renderItems(comicsList), newItemLoading)}\n      <button\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n        disabled={newItemLoading}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import AppBanner from \"../components/appBanner/AppBanner\";\nimport ComicsList from \"../components/comicsList/ComicsList\";\n\nimport { Helmet } from \"react-helmet\";\n\nconst ComicsPage = () => {\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Page with list of our comics\" />\n        <title>Comics page</title>\n      </Helmet>\n      <AppBanner />\n      <ComicsList />\n    </>\n  );\n};\n\nexport default ComicsPage;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [process, setProcess] = useState(\"waiting\");\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" }\n    ) => {\n      setProcess(\"loading\");\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        return data;\n      } catch (e) {\n        setProcess(\"error\");\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setProcess(\"loading\");\n  }, []);\n\n  return { request, clearError, process, setProcess };\n};\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { request, clearError, process, setProcess } = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const response = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n    );\n    return response.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const response = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\n    return _transformCharacter(response.data.results[0]);\n  };\n\n  const getCharacterByName = async (name) => {\n    const response = await request(\n      `${_apiBase}characters?name=${name}&${_apiKey}`\n    );\n    return response.data.results.map(_transformCharacter);\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const response = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n    return response.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const response = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(response.data.results[0]);\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : \"There is no description for this character\",\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} pages`\n        : \"No information about the number of pages\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects[0]?.language || \"en-us\",\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"not available\",\n    };\n  };\n\n  return {\n    clearError,\n    process,\n    setProcess,\n    getAllCharacters,\n    getCharacter,\n    getCharacterByName,\n    getAllComics,\n    getComic,\n  };\n};\n\nexport default useMarvelService;\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","errorGif","alt","AppBanner","_jsxs","className","children","avengers","avengersLogo","setContent","process","Component","newItemLoading","Spinner","Error","ComicsList","comicsList","setComicsList","useState","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","length","arr","items","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","onClick","disabled","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacter","getCharacterByName","getComic"],"sourceRoot":""}