{"version":3,"file":"static/js/125.07c6691a.chunk.js","mappings":"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","sources":["components/skeleton/Skeleton.js","utils/setContent.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","pages/MainPage.js","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <div>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Skeleton;\n","import Skeleton from \"../components/skeleton/Skeleton\";\nimport Spinner from \"../components/spinner/Spinner\";\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, data) => {\n  switch (process) {\n    case \"waiting\":\n      return <Skeleton />;\n    case \"loading\":\n      return <Spinner />;\n    case \"confirmed\":\n      return <Component data={data} />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nexport default setContent;\n","import \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nimport { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n\n  const { clearError, getCharacter, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img className=\"randomchar__decoration\" src={mjolnir} alt=\"mjolnir\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n\n  const imgStyle = {\n    objectFit:\n      thumbnail ===\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n        ? \"contain\"\n        : \"cover\",\n  };\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        className=\"randomchar__img\"\n        style={imgStyle}\n        src={thumbnail}\n        alt=\"Random character\"\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import \"./charList.scss\";\n\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport PropTypes from \"prop-types\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEnded(newCharList.length < 9);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  const renderItems = (arr) => {\n    const items = arr.map((item, i) => {\n      const imgStyle = {\n        objectFit:\n          item.thumbnail ===\n          \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n            ? \"unset\"\n            : \"cover\",\n      };\n\n      return (\n        <li\n          key={i}\n          className=\"char__item\"\n          ref={(elem) => (itemRefs.current[i] = elem)}\n          tabIndex={0}\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          }}\n        >\n          <img style={imgStyle} src={item.thumbnail} alt={item.name} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n    return <ul className=\"char__grid\">{items}</ul>;\n  };\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        disabled={newItemLoading}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import \"./charInfo.scss\";\n\nimport { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport PropTypes from \"prop-types\";\n\nconst CharInfo = ({ charId }) => {\n  const [char, setChar] = useState(null);\n\n  const { clearError, getCharacter, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, [charId]);\n\n  const updateChar = () => {\n    if (!charId) return;\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  const imgStyle = {\n    objectFit:\n      thumbnail ===\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n        ? \"contain\"\n        : \"cover\",\n  };\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img style={imgStyle} src={thumbnail} alt={name} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true,\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import \"./charSearchForm.scss\";\n\nimport { useState } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport { Link } from \"react-router-dom\";\n\nimport { Formik, Form, Field, ErrorMessage as ErrMsg } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst CharSearchForm = () => {\n  const [char, setChar] = useState(null);\n  const { loading, error, clearError, getCharacterByName } = useMarvelService();\n\n  const updateChar = (name) => {\n    clearError();\n    getCharacterByName(name).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const errorMessage = error ? (\n    <div className=\"char__search-critical-error\">\n      <ErrorMessage />\n    </div>\n  ) : null;\n\n  const results = !char ? null : char.length > 0 ? (\n    <div className=\"char__search-wrapper\">\n      <div className=\"char__search-success\">\n        There is! Visit {char[0].name} page?\n      </div>\n      <Link\n        to={`/characters/${char[0].id}`}\n        className=\"button button__secondary\"\n      >\n        <div className=\"inner\">To page</div>\n      </Link>\n    </div>\n  ) : (\n    <div className=\"char__search-error\">\n      The character was not found. Check the name and try again\n    </div>\n  );\n\n  return (\n    <div className=\"char__search-form\">\n      <Formik\n        initialValues={{\n          charName: \"\",\n        }}\n        validationSchema={Yup.object({\n          charName: Yup.string().required(\"This field is required\"),\n        })}\n        onSubmit={({ charName }) => {\n          updateChar(charName);\n        }}\n      >\n        <Form>\n          <label htmlFor=\"charName\" className=\"char__search-label\">\n            Or find a character by name:\n          </label>\n          <div className=\"char__search-wrapper\">\n            <Field name=\"charName\" placeholder=\"Enter name\" type=\"text\" />\n            <button\n              className=\"button button__main\"\n              disabled={loading}\n              type=\"submit\"\n            >\n              <div className=\"inner\">find</div>\n            </button>\n          </div>\n          <ErrMsg\n            name=\"charName\"\n            className=\"char__search-error\"\n            component=\"div\"\n          />\n        </Form>\n      </Formik>\n      {results}\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default CharSearchForm;\n","import RandomChar from \"../components/randomChar/RandomChar\";\nimport CharList from \"../components/charList/CharList\";\nimport CharInfo from \"../components/charInfo/CharInfo\";\nimport decoration from \"../resources/img/vision.png\";\n\nimport { useState } from \"react\";\nimport ErrorBoundary from \"../components/errorBoundary/ErrorBoundary\";\nimport CharSearchForm from \"../components/charSearchForm/CharSearchForm\";\nimport { Helmet } from \"react-helmet\";\n\nconst MainPage = () => {\n  const [selectedChar, setSelectedChar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setSelectedChar(id);\n  };\n\n  return (\n    <main>\n      <Helmet>\n        <meta name=\"description\" content=\"Marvel information portal\" />\n        <title>Marvel information portal</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <div>\n          <ErrorBoundary>\n            <CharInfo charId={selectedChar} />\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <CharSearchForm />\n          </ErrorBoundary>\n        </div>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </main>\n  );\n};\n\nexport default MainPage;\n","import errorGif from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: \"block\",\n        width: \"250px\",\n        height: \"250px\",\n        objectFit: \"contain\",\n        margin: \"0 auto\",\n      }}\n      src={errorGif}\n      alt=\"error\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [process, setProcess] = useState(\"waiting\");\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" }\n    ) => {\n      setProcess(\"loading\");\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        return data;\n      } catch (e) {\n        setProcess(\"error\");\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setProcess(\"loading\");\n  }, []);\n\n  return { request, clearError, process, setProcess };\n};\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { request, clearError, process, setProcess } = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const response = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n    );\n    return response.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const response = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\n    return _transformCharacter(response.data.results[0]);\n  };\n\n  const getCharacterByName = async (name) => {\n    const response = await request(\n      `${_apiBase}characters?name=${name}&${_apiKey}`\n    );\n    return response.data.results.map(_transformCharacter);\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const response = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n    return response.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const response = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(response.data.results[0]);\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : \"There is no description for this character\",\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} pages`\n        : \"No information about the number of pages\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects[0]?.language || \"en-us\",\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"not available\",\n    };\n  };\n\n  return {\n    clearError,\n    process,\n    setProcess,\n    getAllCharacters,\n    getCharacter,\n    getCharacterByName,\n    getAllComics,\n    getComic,\n  };\n};\n\nexport default useMarvelService;\n"],"names":["Skeleton","_jsxs","children","_jsx","className","setContent","process","Component","data","Spinner","ErrorMessage","Error","View","_ref","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","style","src","alt","href","RandomChar","char","setChar","useState","clearError","getCharacter","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","id","Math","floor","random","then","onCharLoaded","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","items","map","i","ref","elem","tabIndex","onCharSelected","onKeyDown","e","key","renderItems","display","disabled","_ref2","comics","_Fragment","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearchForm","loading","getCharacterByName","errorMessage","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","placeholder","type","ErrMsg","component","MainPage","selectedChar","setSelectedChar","Helmet","content","CharList","CharInfo","decoration","width","height","margin","errorGif","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllComics","getComic"],"sourceRoot":""}